// Code generated by "enumer -type=SourcePrice -linecomment -json=true -text=true -sql=true"; DO NOT EDIT.

package common

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _SourcePriceName = "cexdex"

var _SourcePriceIndex = [...]uint8{0, 3, 6}

const _SourcePriceLowerName = "cexdex"

func (i SourcePrice) String() string {
	i -= 1
	if i >= SourcePrice(len(_SourcePriceIndex)-1) {
		return fmt.Sprintf("SourcePrice(%d)", i+1)
	}
	return _SourcePriceName[_SourcePriceIndex[i]:_SourcePriceIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SourcePriceNoOp() {
	var x [1]struct{}
	_ = x[SourcePriceCex-(1)]
	_ = x[SourcePriceDex-(2)]
}

var _SourcePriceValues = []SourcePrice{SourcePriceCex, SourcePriceDex}

var _SourcePriceNameToValueMap = map[string]SourcePrice{
	_SourcePriceName[0:3]:      SourcePriceCex,
	_SourcePriceLowerName[0:3]: SourcePriceCex,
	_SourcePriceName[3:6]:      SourcePriceDex,
	_SourcePriceLowerName[3:6]: SourcePriceDex,
}

var _SourcePriceNames = []string{
	_SourcePriceName[0:3],
	_SourcePriceName[3:6],
}

// SourcePriceString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SourcePriceString(s string) (SourcePrice, error) {
	if val, ok := _SourcePriceNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SourcePriceNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SourcePrice values", s)
}

// SourcePriceValues returns all values of the enum
func SourcePriceValues() []SourcePrice {
	return _SourcePriceValues
}

// SourcePriceStrings returns a slice of all String values of the enum
func SourcePriceStrings() []string {
	strs := make([]string, len(_SourcePriceNames))
	copy(strs, _SourcePriceNames)
	return strs
}

// IsASourcePrice returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SourcePrice) IsASourcePrice() bool {
	for _, v := range _SourcePriceValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SourcePrice
func (i SourcePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SourcePrice
func (i *SourcePrice) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SourcePrice should be a string, got %s", data)
	}

	var err error
	*i, err = SourcePriceString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SourcePrice
func (i SourcePrice) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SourcePrice
func (i *SourcePrice) UnmarshalText(text []byte) error {
	var err error
	*i, err = SourcePriceString(string(text))
	return err
}

func (i SourcePrice) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SourcePrice) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SourcePrice: %[1]T(%[1]v)", value)
	}

	val, err := SourcePriceString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
